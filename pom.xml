<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.kroger.b2b</groupId>
		<artifactId>b2b-3PO</artifactId>
		<version>1.0-SNAPSHOT</version>
	</parent>

	<artifactId>b2b-3PO-service</artifactId>
	<description>A seed folder structure for new SCRS service development.</description>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<resource.delimiter>@</resource.delimiter> <!-- delimiter that doesn't clash with Spring ${} placeholders -->

		<!--
            java.version is a SpringBoot plugin property that manages the source and target compiler settings.
            Typically '1.8' or '11'.
        -->
		<java.version>1.8</java.version>
		<spring.boot.version>2.2.5.RELEASE</spring.boot.version>


		<!-- dependency versions not managed by Spring Boot's BOM -->
		<com.microsoft.azure.version>2.2.0</com.microsoft.azure.version>
		<org.mapstruct.version>1.3.1.Final</org.mapstruct.version>
		<org.projectlombok.version>1.18.12</org.projectlombok.version>
		<org.apache.avro.version>1.9.2</org.apache.avro.version>
		<io.confluent.version>5.4.1</io.confluent.version>
		<azure.applicationinsights.version>2.5.1</azure.applicationinsights.version>
		<azure.metrics.version>2.2.3</azure.metrics.version>
		<main.basedir>${project.basedir}/..</main.basedir>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<!-- Import dependency management from Spring Boot -->
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${spring.boot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>

		<!-- A P P L I C A T I O N -->

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${org.mapstruct.version}</version>
		</dependency>
		<!-- Avro support -->
		<dependency>
			<groupId>org.apache.avro</groupId>
			<artifactId>avro</artifactId>
			<version>${org.apache.avro.version}</version>
		</dependency>
		<dependency>
			<groupId>io.confluent</groupId>
			<artifactId>kafka-avro-serializer</artifactId>
			<version>${io.confluent.version}</version>
			<!-- Remove runtime deprecation warning for Jackson's Joda-Time -->
			<exclusions>
				<exclusion>
					<groupId>joda-time</groupId>
					<artifactId>joda-time</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- enables intelli-sense in application settings files for custom configuration properties -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- Azure application insights -->
		<dependency>
			<groupId>com.microsoft.azure</groupId>
			<artifactId>applicationinsights-logging-logback</artifactId>
			<version>${azure.applicationinsights.version}</version>
		</dependency>

		<dependency>
			<groupId>com.microsoft.azure</groupId>
			<artifactId>applicationinsights-spring-boot-starter</artifactId>
			<version>${azure.applicationinsights.version}</version>
		</dependency>

		<dependency>
			<groupId>com.microsoft.azure</groupId>
			<artifactId>azure-spring-boot-metrics-starter</artifactId>
			<version>${azure.metrics.version}</version>
		</dependency>

		<!-- T E S T -->


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<!-- Use JUnit5; exclude JUnit4 support. -->
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>

	</dependencies>


	<build>

		<plugins>

			<!--
              ====== spring-boot-maven-plugin ======

              Configures the Spring Boot plugin to generate build-info that is used to
              populate the /actuator/info endpoint.

              Example usage:

              mvn compile

            -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${spring.boot.version}</version>
				<executions>
					<!-- Generate data for /actuator/info endpoint -->
					<execution>
						<id>build-info</id>
						<goals>
							<goal>build-info</goal>
						</goals>
					</execution>
					<execution>
						<id>spring-package</id>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>


			<!--
              ====== git-commit-id-plugin ======

              Populates /actuator/info with Git tag information when the compile phase is executed.

              Example usage:

              mvn compile

            -->
			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
				<version>4.0.0</version>
				<configuration>
					<skip>true</skip> <!-- Need to investigate hanging during build -->
				</configuration>
				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>revision</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!--
                ====== maven-compiler-plugin ======

                Compiles code for the specified java.version and incorporates code generation for
                mapstruct and Lombok.

                Example usage:

                mvn compile

            -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>

					<annotationProcessorPaths>
						<path>
							<groupId>org.mapstruct</groupId>
							<artifactId>mapstruct-processor</artifactId>
							<version>${org.mapstruct.version}</version>
						</path>

						<!-- other annotation processors -->

						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${org.projectlombok.version}</version>
						</path>

					</annotationProcessorPaths>

					<compilerArgs>
						<!-- Annotate mapper classes with Spring bean '@Component' -->
						<compilerArg>-Amapstruct.defaultComponentModel=spring</compilerArg>
					</compilerArgs>

				</configuration>
			</plugin>

			<!--
              ====== maven-checkstyle-plugin ======

              Performs code checkstyle during the check goal.

              Example usage:

              mvn checkstyle:check

              Uses google coding style:
              https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml

            -->
			<!--<plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-checkstyle-plugin</artifactId>
              <version>3.1.1</version>
              <configuration>
                <configLocation>google_checks.xml</configLocation>
                <suppressionsLocation>checkstyle-suppressions.xml</suppressionsLocation>
                <outputFile>${project.build.directory}/checkstyle/checkstyle-result.xml</outputFile>
                <encoding>UTF-8</encoding>
                <includeTestSourceDirectory>false</includeTestSourceDirectory>
                <consoleOutput>true</consoleOutput>
                <failsOnError>true</failsOnError>
                <violationSeverity>warning</violationSeverity>
                <linkXRef>false</linkXRef>
              </configuration>
              <executions>
                <execution>
                  <id>validate</id>
                  <phase>validate</phase>
                  <goals>
                    <goal>check</goal>
                  </goals>
                </execution>
              </executions>
            </plugin>
      -->
			<!--
              ====== maven-pmd-plugin ======

              Performs static code analysis.

              Example usage:

              mvn pmd:check
            -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>3.13.0</version>
				<configuration>
					<failOnViolation>false</failOnViolation>
					<linkXRef>false</linkXRef>
					<printFailingErrors>true</printFailingErrors>
				</configuration>
				<executions>
					<execution>
						<id>validate</id>
						<phase>validate</phase>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.0.0-M4</version>
				<configuration>
					<includes>
						<include>**/*Test</include>
					</includes>
				</configuration>
			</plugin>

		</plugins>
	</build>

</project>
